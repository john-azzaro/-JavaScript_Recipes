'use strict';
// TOPIC /////////////////////////////////////////////////////////////////////////////////////////////////////
//
//     Array Method: .flat()
//
// SYNTAX ////////////////////////////////////////////////////////////////////////////////////////////////////
//
//     let newArray = array.flat(depth);

//
// SUMMARY ///////////////////////////////////////////////////////////////////////////////////////////////////
//
//      • .flat() creates a new array with all the sub-arrays element concatenated into it recursively
//        up to the specified depth.
//      • .flat() is an ES2019 addition, so compatibility is still weak, especially with IE or edge.
//      • .flat() takes as a parameter the depth to which you can flatten the array.
//
// EXAMPLES //////////////////////////////////////////////////////////////////////////////////////////////////
//
//      EXAMPLE 1: ES6 work-around
//
// RESOURCES /////////////////////////////////////////////////////////////////////////////////////////////////
//
//////////////////////////////////////////////////////////////////////////////////////////////////////////////

// const missingNumbers = [1, ,3, ,5];
// missingNumbers.flat();

// ES6 work-around solution.

const oneLevelDeep = [[1, 2], [3]];
const flattened = [].concat(...oneLevelDeep);
console.log(flattened);
